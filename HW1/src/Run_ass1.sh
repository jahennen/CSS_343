#! /bin/bash
#
# Sample Run file for Assignment 1.
#
# Copyright 2012 Systems Deployment, LLC
# Author: Morris Bernstein (morris@systems-deployment.com)


# Clean up from previous run (if any).
rm -rf build/ out/
rm -f wordcount

# Create directories the files generated by the compiler and for the
# output generated by the wordcount.
mkdir -p build out

# Shell variables to make changes easier
PROGRAM=wordcount

# Build the program.  Since it's trivial, we don't need the overhead
# of maintaining a separate makefile.
# Note the flags will put the program and the temporaries into the
# build subdirectory.  Check to make sure something was built before
# continuing.
make
[ -x build/${PROGRAM} ] || ( echo "Build failed" ; exit 1 )
mv build/${PROGRAM} .

# Run wordcount on each input file.  This assumes the input files
# have the .data extension and are in the current directory.  Other
# conventions are equally valid (e.g. putting all the data in a
# subdirectory).
DATA=../tests/*.txt
for data in ${DATA}; do
    # Construct $out and $err variables by subsituting the extension
    # and adding a directory prefix.  e.g. foo.data becomes
    # out/foo.out and out/foo.err
    out=out/`basename $data .txt`.out
    err=out/`basename $data .txt`.err
    ./${PROGRAM} < ${data} > ${out} 2> ${err}
    [ $? ] || (echo "test run on ${data} failed" ; exit 1)
    # Uncomment this if you have baseline files to compare output.
    # baseline=baseline/`basename $data`.baseline
    # diff ${baseline} ${out} || (echo "check failed on ${data}"; exit 1)
done
