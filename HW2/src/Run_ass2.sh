#! /bin/bash
#
# Sample Run file for Assignment 1.
#
# Copyright 2012 Systems Deployment, LLC
# Author: Morris Bernstein (morris@systems-deployment.com)

# Adapted for Assignment 2 by Jay Hennen

# Clean up from previous run (if any).
rm -rf build/ out/
rm -f btreetest
rm -f wordcount
rm -f dedup

# Create directories the files generated by the compiler and for the
# output generated by the wordcount.
mkdir -p build out

# Shell variables to make changes easier
PROGRAM1=btreetest
PROGRAM2=dedup
PROGRAM3=wordcount

# Build all three parts into the separate folder, then move to source folder.

make ${PROGRAM1} ${PROGRAM2} ${PROGRAM3}
[ -x build/${PROGRAM1} -a -x build/${PROGRAM2} -a -x build/${PROGRAM3} ] || ( echo "Build failed" ; exit 1 )
mv build/${PROGRAM1} build/${PROGRAM2} build/${PROGRAM3} .

# Run test on BTree.  The program itself is the test, so read the source for documentation
# and output file to evaluate coverage.

./${PROGRAM1} > ./out/${PROGRAM1}.txt

# Run wordcount on each input file.  This assumes the input files
# have the .txt extension and are in the ../tests directory.  
DATA=../tests/*.txt
for data in ${DATA}; do
    # Construct $out and $err variables by subsituting the extension
    # and adding a directory prefix.  e.g. foo.data becomes
    # out/foo.out and out/foo.err
    out=out/`basename $data .txt`${PROGRAM2}.out
    err=out/`basename $data .txt`${PROGRAM2}.err
    ./${PROGRAM2} < ${data} > ${out} 2> ${err}
    [ $? ] || (echo "test run on ${data} failed" ; exit 1)
    # Uncomment this if you have baseline files to compare output.
    # baseline=baseline/`basename $data`.baseline
    # diff ${baseline} ${out} || (echo "check failed on ${data}"; exit 1)
done

# Run dedup on each input file.  This assumes the input files
# have the .txt extension and are in the ../tests directory.
# these tests files should work just as well because there are a number
# of duplicates and the words are not ordered  
DATA=../tests/*.txt
for data in ${DATA}; do
    # Construct $out and $err variables by subsituting the extension
    # and adding a directory prefix.  e.g. foo.data becomes
    # out/foo.out and out/foo.err
    out=out/`basename $data .txt`${PROGRAM3}.out
    err=out/`basename $data .txt`${PROGRAM3}.err
    ./${PROGRAM3} < ${data} > ${out} 2> ${err}
    [ $? ] || (echo "test run on ${data} failed" ; exit 1)
    # Uncomment this if you have baseline files to compare output.
    # baseline=baseline/`basename $data`.baseline
    # diff ${baseline} ${out} || (echo "check failed on ${data}"; exit 1)
done
